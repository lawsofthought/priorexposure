N <- 100
y.training <- sample(y, size = N) # Down sample
hist(y.training, 100)
M <- jags.model(
'dp.jags',
data = list(
'y' = y.training, 'N' = length(y.training), 'K.bar' = 25
),
n.chains = 3
)
update(M, 1000)
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
S <- coda.samples(M, variable.names = c('stick.alpha'), n.iter=1000)
HPDinterval(S)
S <- coda.samples(M, variable.names = c('vpi'), n.iter=1000)
S[[1]][1,]
plot(S[[1]][1,])
plot(S[[1]][1,1:10])
S[[1]][1,1:10]
source('~/gitdev/rprojects/priorexposure/mixture_models/dp_test.R')
p
plot(p)
cumsum(p)
source('~/gitdev/rprojects/priorexposure/mixture_models/dp_test.R')
cumsum(p)
p[1:5]
p[1:10]
p[1:7]
source('~/gitdev/rprojects/priorexposure/mixture_models/dp_test.R')
p[1:7]
setwd("~/gitdev/rprojects/priorexposure/mixture_models")
setwd("~/gitdev/rprojects/priorexposure/mixture_models")
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
HPDinterval(S)
S <- coda.samples(M, variable.names = c('vpi'), n.iter=1000)
HPDinterval(S)
S[[1]][1,]
S[[1]][1,][1:5]
cumsum(S[[1]][1,][1:5])
cumsum(S[[2]][1,][1:5])
S[[1]][1,]
S[[1]]
apply(S[[1]], 2, median)
apply(S[[1]], 2, median)[1:5]
apply(S[[2]], 2, median)[1:5]
apply(S[[3]], 2, median)[1:5]
vpi
update(M, 10000)
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
rbeta(1, 1, .2)
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
S <- coda.samples(M, variable.names = c('vpi'), n.iter=1000)
HPDinterval(S)
apply(S[[1]], 2, median)
apply(S[[1]], 2, median)[1:5]
apply(S[[1]], 2, median)[1:2]
apply(S[[1]], 2, median)[1:3]
apply(S[[2]], 2, median)[1:3]
apply(S[[3]], 2, median)[1:3]
S <- coda.samples(M, variable.names = c('stick.alpha'), n.iter=10000)
HPDinterval(S)
summary(S)
hist(S[[1]])
hist(S[[1]],100)
S <- coda.samples(M, variable.names = c('stick.alpha'), n.iter=10000)
S <- coda.samples(M, variable.names = c('stick.alpha'), n.iter=10000)
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
data("galaxy")
x0 <- galaxy$speed
x <- prescale(x0)
maxiter <- 4000;
rec <- 3000
ngrid <- 100
library(dpmixsim)
data("galaxy")
x0 <- galaxy$speed
x <- prescale(x0)
maxiter <- 4000;
rec <- 3000
ngrid <- 100
x
x0
?prescale
res <- dpmixsim(x, M=1, a=1, b=0.1, upalpha = 1, maxiter = maxiter, rec=rec, nclinit = 4)
z <- postdpmixciz(x=x, res=res, rec=rec, ngrid = ngrid, plot=T)
res <- dpmixsim(x, M=2, a=1, b=0.001, upalpha=0, maxiter=maxiter,
rec=rec, nclinit=4)
z <- postdpmixciz(x, res=res, rec=rec, ngrid=ngrid, plot=T)
x
?prescale
z <- postdpmixciz(x, res=res, rec=rec, ngrid=ngrid, plot=T)
z
x
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.2.R')
plot(
x = x.ax,
y = dnorm(x.ax, mean = mu[1], sd = sigma[1]),
xlab = 'x',
ylab = 'p(x)',
type = 'l',
col = 'blue',
ylim = c(0, 1.1 * dnorm(0, 0, min(sigma)))
)
for (k in 2:K) {
lines(x.ax,
dnorm(x.ax, mean = mu[k], sd = sigma[k]),
type = 'l',
col = 'blue')
}
rbeta(1, 1, 1)
rbeta(1, 1, 1)
rbeta(1, 1, 1)
rbeta(1, 1, 1)
rbeta(1, 1, 0.1)
rbeta(1, 1, 0.1)
rbeta(1, 1, 0.3)
rbeta(1, 1, 0.3)
rbeta(1, 1, 0.3)
rbeta(1, 1, 0.3)
1/(1.3)
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.2.R')
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.2.R')
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.2.R')
res
str(res)
res$krec
length(res$krec)
length(res$wrec)
res$wrec
dim(res$wrec)
res$phirec
length(res$phirec)
z <- postdpmixciz(x, res=res, rec=rec, ngrid=ngrid, plot=T)
z <- postdpmixciz(x, plot=T)
z <- postdpmixciz(x, res=res, plot=T)
training.data
res
res <- dpmixsim(training.data, M=0.3, maxiter = 10000)
z <- postdpmixciz(x, res=res, plot=T)
res <- dpmixsim(training.data, M=3, maxiter = 10000)
z <- postdpmixciz(x, res=res, plot=T)
z <- postdpmixciz(x, res=res, , ngrid=100, plot=T)
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.2.R')
res <- dpmixsim(training.data, M=3, maxiter = 10000)
z <- postdpmixciz(x, res=res, ngrid=100, plot=T)
res <- dpmixsim(training.data, maxiter = 10000)
z <- postdpmixciz(x, res=res, ngrid=100, plot=T)
res <- dpmixsim(training.data, M=1, maxiter = 10000)
z <- postdpmixciz(x, res=res, ngrid=100, plot=T)
res <- dpmixsim(training.data, M=0.3, maxiter = 10000)
z <- postdpmixciz(x, res=res, ngrid=100, plot=T)
res <- dpmixsim(training.data, upalpha=True, a0=1, b0=1, maxiter = 10000)
res <- dpmixsim(training.data, upalpha=T, a0=1, b0=1, maxiter = 10000)
z <- postdpmixciz(x, res=res, ngrid=100, plot=T)
library(DPpackage)
source('~/.active-rstudio-document')
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.3.R')
fit1.1
fit1.2
fit1.3
plot(fit1.1,ask=FALSE)
cbind(fit1.1$x1,fit1.1$dens)
cbind(fit1.2$x1,fit1.2$dens)
cbind(fit1.3$x1,fit1.3$dens)
cbind(fit1.4$x1,fit1.4$dens)
cbind(fit1.1$x1,fit1.1$dens)
length(galaxy)
galaxy
plot(fit1.2,ask=FALSE,output="param")
DPrandom(fit1.2)
s
plot(DPrandom(fit1.2,predictive=TRUE),ask=FALSE)
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.4.R')
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.4.R')
plot(fit1.1)
fit1.1
fit1.1$ylim
plot(fit1.1, ylim=c(0,1))
str(fit1.1)
fit1.1
fit1.1$ncluster
fit1.1$state
fit1.1$state()
fit1.1$state
fit1.1$state$ncluster
fit1.1$state$muclus
fit1.1$state$muclus[:10]
fit1.1$state$muclus[1:10]
mu
fit1.1$state$ss
max(fit1.1$state$ss)
length(y.training)
max(fit1.1$state$alpha
fit1.1$state$alpha
qnorm(0.25, mean=10, sd=10)
qnorm(0.25, mean=0, sd=10)
qnorm(0.25, mean=0, sd=20)
qnorm(0.25, mean=0, sd=10)
mu
qnorm(0.25, mean=0, sd=20)
20^2
1/20^2
c(0)
c(0,)
rep(0,1)
diag(0.5,1)
nburn <- 100
nsave <- 1000
nskip <- 10
ndisplay <- 100
mcmc <- list(nburn=nburn,nsave=nsave,nskip=nskip,ndisplay=ndisplay)
# Example of Prior information 1
# Fixing alpha, m1, and Psi1
prior1 <- list(alpha=1,
m1=0,
k0=1/(20^2),
psiinv1=diag(0.5,1))
nburn <- 100
nsave <- 1000
nskip <- 10
ndisplay <- 100
mcmc <- list(nburn=nburn,nsave=nsave,nskip=nskip,ndisplay=ndisplay)
# Example of Prior information 1
# Fixing alpha, m1, and Psi1
prior1 <- list(alpha=1,
m1=0,
k0=1/(20^2),
psiinv1=diag(0.5,1))
fit1.1 <- DPdensity(y=y.training,
prior=prior1,
mcmc=mcmc,
state=state,status=TRUE)
prior1 <- list(alpha=1,
m1=rep(0,1),
k0=1/(20^2),
psiinv1=diag(0.5,1))
fit1.1 <- DPdensity(y=y.training,
prior=prior1,
mcmc=mcmc,
state=state,status=TRUE)
prior1 <- list(alpha=1,
m1=rep(0,1),
k0=1/(20^2))
fit1.1 <- DPdensity(y=y.training,
prior=prior1,
mcmc=mcmc,
state=state,status=TRUE)
nburn <- 100
nsave <- 1000
nskip <- 10
ndisplay <- 100
mcmc <- list(nburn=nburn,nsave=nsave,nskip=nskip,ndisplay=ndisplay)
# Example of Prior information 1
# Fixing alpha, m1, and Psi1
prior4 <- list(a0=2,
b0=1,
m2=rep(0,1),
s2=diag(100000,1),
psiinv2=solve(diag(0.5,1)),
nu1=4,nu2=4,tau1=1,tau2=100)
fit1.1 <- DPdensity(y=y.training,
prior=prior4,
mcmc=mcmc,
state=state,status=TRUE)
setwd("~/gitdev/rprojects/priorexposure/mixture_models")
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.4.R')
plot(fit1.1)
plot(fit1.1, output='param')
DPrandom(fit1.1)
plot(DPrandom(fit1.1))
plot(DPrandom(fit1.1,predictive=TRUE),ask=FALSE)
fit1.1$state
state <- fit1.1$state
names(state)
state$alpha
state$muclus
state$muclus[:10]
state$muclus[1:10]
state$muclus == state$muclus[1]
mean(state$muclus == state$muclus[1])
sum(state$muclus == state$muclus[1])
q <- DPrandom(fit1.1)
q
names(q)
q$prediction
q
head(q$prediction)
q
names(q)
names(fit1.1)
state$ss
table(state$ss)
length(state$ss)
state$muclus
state$muclus[:20]
state$muclus[1:20]
state$sigmaclus[1:20]
library('rjags')
source('dp.tools.R')
set.seed(101)
K <- 3
mu <- seq(-10, 10, length.out = K)
sigma <- sample(c(2, 5, 3.5), K, replace = T)
x.ax <- seq(-25, 25, length.out = 1e3)
plot(
x = x.ax,
y = dnorm(x.ax, mean = mu[1], sd = sigma[1]),
xlab = 'x',
ylab = 'p(x)',
type = 'l',
col = 'blue',
ylim = c(0, 1.1 * dnorm(0, 0, min(sigma)))
)
for (k in 2:K) {
lines(x.ax,
dnorm(x.ax, mean = mu[k], sd = sigma[k]),
type = 'l',
col = 'blue')
}
vpi <- rdirich(rep(1, K))
N <- 1e5
x <- sample(seq(K), size = N, replace = TRUE, prob = vpi)
y <- rep(0, N)
for (i in 1:N) {
y[i] <- rnorm(1, mean = mu[x[i]], sd = sigma[x[i]])
}
hist(y, 100)
N <- 100
y.training <- y[1:N]
dev.of()
dev.off()
library('rjags')
source('dp.tools.R')
set.seed(101)
K <- 3
mu <- seq(-10, 10, length.out = K)
sigma <- sample(c(2, 5, 3.5), K, replace = T)
x.ax <- seq(-25, 25, length.out = 1e3)
plot(
x = x.ax,
y = dnorm(x.ax, mean = mu[1], sd = sigma[1]),
xlab = 'x',
ylab = 'p(x)',
type = 'l',
col = 'blue',
ylim = c(0, 1.1 * dnorm(0, 0, min(sigma)))
)
for (k in 2:K) {
lines(x.ax,
dnorm(x.ax, mean = mu[k], sd = sigma[k]),
type = 'l',
col = 'blue')
}
vpi <- rdirich(rep(1, K))
N <- 1e5
x <- sample(seq(K), size = N, replace = TRUE, prob = vpi)
y <- rep(0, N)
for (i in 1:N) {
y[i] <- rnorm(1, mean = mu[x[i]], sd = sigma[x[i]])
}
hist(y, 100)
N <- 100
y.training <- y[1:N]
M <- jags.model(
'dp.7.jags',
data = list(
'y' = y.training, 'n' = length(y.training)),
n.chains = 3
)
update(M, 10000)
S <- coda.samples(M, variable.names = c('alpha'), n.iter=100)
HPDinterval(S
)
S <- coda.samples(M, variable.names = c('alpha'), n.iter=1000)
HPDinterval(S)
hist(S[[1]])
hist(S[[1]], 25)
apply(S[[1]], 2, median)
apply(S[[2]], 2, median)
apply(S[[3]], 2, median)
S <- coda.samples(M, variable.names = c('n.cluster'), n.iter=100)
HPDinterval(S)
S <- coda.samples(M, variable.names = c('cluster.mean'), n.iter=100)
HPDinterval(S)
S <- coda.samples(M, variable.names = c('z'), n.iter=100)
S
S[[1]]
dim(S[[1]])
S[[1]][1,]
table(S[[1]][1,])
table(S[[1]][2,])
table(S[[1]][3,])
apply(S[[1]], 2, sum)
table(S[[1]][1,])
table(S[[1]][100,])
S[[1]]
table(S[[1]])
length(table(S[[1]]))
length(table(S[[2]]))
table(S[[2]])
table(S[[3]])
S.mu <- coda.samples(M, variable.names = c('cluster.mean'), n.iter=1000)
S.mu[[1]][1,]
S.mu[[1]][1,1:10]
S.x <- coda.samples(M, variable.names = c('z', 'cluster.mean'), n.iter=10000)
HPDinterval(S.x)
S.x[[1]][1,]
length(S.x[[1]][1,])
S.x[[1]][1,][1:100]
S.x[[1]][1,][101:200]
table(S.x[[1]][1,][101:200])
S.x[[1]][1,][101:200]
S.x[[1]][1,][1:100]
table(S.x[[1]][1,][101:200])
S.x[[1]][1,][101:200]
x.state <- S.x[[1]][1,][101:200]
x.state
table(x.state)
S.x[[1]][1,][1:100]
latent.mean <- S.x[[1]][1,][1:100]
latent.mean[latent.state == 1]
mu.state <- S.x[[1]][1,][1:100]
mu.state[x.state == 1]
x.state
mu.state[1]
table(x.state)
mu.state[2]
mu.state[3]
mu
mu.state[5]
S[[1]][1, 101]
S[[1]][1,]
S.x[[1]][1, 101]
S.x[[1]][1, 101:110]
S.x[[1]][10000, 101:110]
table(S.x[[1]][10000])
table(S.x[[1]][10000,])
table(S.x[[1]][10000,101:200])
table(S.x[[2]][10000,101:200])
S.x[[2]][10000, c(1,2,3,4,5)]
M$state()[[1]]$x
M$state()[[1]]$z
table(M$state()[[1]]$z)
M$state()[[1]]$cluster.mean[1]
M$state()[[1]]$cluster.mean[c(2, 3)]
M$state()[[1]]$cluster.mean[c(1, 2, 3)]
hist(y.training)
hist(y.training, 25)
hist(y, 100)
S.x[[1]][1,]
S.x[[1]][1,1]
S.x[[1]][,1]
hist(S.x[[1]][,1])
hist(S.x[[1]][,101])
S.x[[1]][,101]
length(S.x[[1]][,101])
y.training[1]
length(y)
length(x)
x[1]
hist(S[[1][1,1:100]])
hist(S[[1][1,1:100])
S[[1]][1,1:100]
S[[1]][1,101:200]
S.x[[1]][1,1:100]
hist(S.x[[1]][1,1:100])
table(S.x[[1]][1,1:100])
S.x[[1]][1,101:200]
a <- S.x[[1]][1,101:200]
values(a)
a
class(a)
names(a)
a
S.x[[1]][1,1:100]
S.x[[1]][1,1:100][a]
table(S.x[[1]][1,1:100][a])
S.x[[1]][1,1:100][S.x[[1]][1,101:200]]
table(S.x[[1]][1,1:100][S.x[[1]][1,101:200]])
table(S.x[[1]][2,1:100][S.x[[1]][2,101:200]])
Q <- c()
S.x[[1]][1,1:100][S.x[[1]][1,101:200]]
for (i=1:10000){Q <- rbind(Q, S.x[[1]][1,1:100][S.x[[1]][1,101:200]])}
for (i in 1:10000){Q <- rbind(Q, S.x[[1]][1,1:100][S.x[[1]][1,101:200]])}
length(Q)
log10(length(Q))
dim(Q)
Q[1,]
Q[2,]
class(Q)
length(as.vector(Q))
hist(as.vector(Q))
hist(as.vector(Q),100)
table(as.vector(Q))
Q <- c()
for (i in 1:10000){Q <- rbind(Q, S.x[[1]][i,1:100][S.x[[1]][i,101:200]])}
hist(as.vector(Q),100)
Q <- c()
for (i in 1:10000){Q <- rbind(Q, S.x[[2]][i,1:100][S.x[[2]][i,101:200]])}
hist(as.vector(Q),100)
S <- coda.samples(M, variable.names = c('alpha'), n.iter=1000)
HPDinterval(S)
setwd("~/gitdev/rprojects/priorexposure/mixture_models")
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
source('~/gitdev/rprojects/priorexposure/mixture_models/dp.R')
S <- coda.samples(M, variable.names = c('alpha'), n.iter=1000)
HPDinterval(S)
1/(10*10)
source('~/gitdev/rprojects/priorexposure/mixture_models/dp_check.R')
